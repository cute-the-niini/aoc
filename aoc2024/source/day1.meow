% meow/1

namespace day1;

singleton solution;

%region - Parsing --------------------------------------------------------------
asset input = file "day1.txt";

// The input for this problem is quite neatly formatted as space-separated
// columns. Meow doesn't have a built-in CSV (or TSV/etc) parser currently,
// but since we don't have to worry about text within a column here the
// barebones "split at line breaks to get all rows, then split at spaces
// to get the columns of a row" works.
//
// Because the puzzle mostly wants you to treat each column independently
// of their rows, `iterator unzip` does the job of taking an 
// `iterable<#(X, Y)>` to an `#(iterable<X>, iterable<Y>)`.
//
// The current implementation in meow.core consumes the entire iterable
// before returning the tuple of each column, which is not ideal, but isn't
// a problem in this puzzle.
//
implement solution {
  pure def self example =
    """
    3   4
    4   3
    2   5
    1   3
    3   9
    3   3
    """;
  
  pure def self input =
    force input | read-utf8;

  @spec (Self, text) -> #(array<int>, array<int>);
  pure def self parse: Input::text {
    lines(Input)
      | map: words(_)
      | map: { Pair in 
                 let [L0, R0] = Pair as array in
                 let L = #int parse: L0 | unwrap! in
                 let R = #int parse: R0 | unwrap! in
                 #(L, R)
             }
      | unzip;
  } test {
    assert solution parse: solution example
      ==> #([3, 4, 2, 1, 3, 3],
            [4, 3, 5, 3, 9, 3]);
  }
}
%endregion

%region - Part 1 ---------------------------------------------------------------
// Part 1 wants you to pair each number in the columns by their natural integer
// ordering and then compute the absolute difference between them. There might
// be an online way of doing this, but since the lists are the same length and
// they're both integers, sorting the two lists first and then doing a
// pairwise composition to get their difference is a lot simpler and
// efficient enough. These lists aren't *that* long (my puzzle input is
// only 1000 lines).
//
// You might find it a bit awkward that meow.core only defines
// `_ zip: _ with: _` on iterators rather than any iterable, so you
// always need to convert a list to a list iterator first, but I think
// it makes it clearer that what you get out of the operation is an iterator,
// regardless of what the inputs to it were.
//
implement solution {
  @spec (Self, #(array<int>, array<int>)) -> T when T is &iterable<int>;
  pure def self pairwise-distances: Lists {
    let #(L, R) = Lists in
    L sort iterator zip: R sort with: { A, B in (A - B) absolute };
  } test {
    assert solution pairwise-distances: (solution parse: solution example) | as array
      ==> [2, 1, 0, 1, 2, 5];
  }

  @spec (Self, text) -> int;
  pure def self part1: Input {
    self parse: Input
      |> self pairwise-distances: _
      |> _ iterator
      |> _ sum-of: #int;
  } test {
    assert solution part1: solution example ==> 11;
  }

  @spec (Self) -> int;
  pure def self part1 =
    self part1: self input;
}
%endregion

%region - Part 2 ---------------------------------------------------------------
// Part two wants you to count numbers on the first column by how often they
// appear in the right column. That's just a frequency lookup. When I wrote
// this, I hadn't implemented `iterator frequencies` in meow.core yet
// (there are a few statistical functions and similar that are not there yet),
// but it's quite straightforward anyway.
//
// For reference, this is the implementation of frequencies:
//
//    @spec (Self) -> dictionary<A, int> when Self is &iterator<A>
//    def self frequencies =
//      self
//        | fold-from: #mutable-dictionary empty with: { Map, X in
//            Map at: X update-with: _ + 1 or-default: 1
//          }
//        | freeze;
// 
// Dictionary doesn't support custom equality and meow.core doesn't have a
// hash table implementation with custom hashing yet. This isn't a problem
// here since we're just working with integer primitives and the primitive
// equality operator (`=:=`) is equivalent to the custom integer equality
// implementation (`int === int`).
//
implement solution {
  @spec (Self, #(array<int>, array<int>)) -> T when T is &iterable<int>;
  pure def self similarity-scores: Lists {
    let #(L, R) = Lists in
    let Frequencies = R iterator frequencies in
    L iterator
      | map: { X in X * (Frequencies at: X or-default: 0) }
  } test {
    assert solution similarity-scores: (solution parse: solution example) | as array
      ==> [9, 4, 0, 0, 9, 9];
  }

  @spec (Self, text) -> int;
  pure def self part2: Input {
    self parse: Input
      |> self similarity-scores: _
      |> _ sum-of: #int;
  } test {
    assert solution part2: solution example ==> 31;
  }

  @spec (Self) -> int;
  pure def self part2 =
    self part2: self input;
}
%endregion